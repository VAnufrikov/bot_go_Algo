
from Ranking import ranking


import telebot


bot = telebot.TeleBot('6575723552:AAE0FExVL55M6iZeo1MN-IJOA1OljvZUPOE')

import os

from news_regressor.news_regressor import NewsRegressor
from upload import upload_data_from_moexalgo, read_data_stock
from datetime import datetime, timedelta
from telebot import types
from agent import predict, get_ticket_price, get_TP_SL


if __name__ == '__main__':
    # os.system("pip3 install --upgrade pip'")
    # os.system("pip3 install 'etna[torch]'")
    # os.system("pip3 install 'etna[auto]'")
    # os.system("pip3 install 'etna[statsforecast]'")
    # os.system("pip3 install 'etna[classification]'")
    # os.system("pip3 install 'etna[prophet]'")
    # os.system("pip3 install 'etna[all]'")

    def get_tiket():
        """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        listing = read_data_stock()
        tikets = listing[(listing['INSTRUMENT_TYPE'] == '–ê–∫—Ü–∏—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è') |
                         (listing['INSTRUMENT_TYPE'] == '–ê–∫—Ü–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —ç–º–∏—Ç–µ–Ω—Ç–∞')]['TRADE_CODE'].unique()
        print(f"–†–∞–Ω–∂–∏—Ä—É–µ–º {len(tikets)} –∞–∫—Ü–∏–π")
        ranking_listing, metrics = ranking(tikets)

        return ' '.join(ranking_listing[:5]), metrics

    ranked_tiket, metrics = get_tiket()

    df = read_data_stock()
    list_tradecode = df['TRADE_CODE'].unique().tolist()

    ticket_lists = [str(i).lower() for i in list_tradecode]
    NR = NewsRegressor()


    @bot.message_handler(commands=['start'])
    def start(message):

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        markup.add(btn1)
        bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!", reply_markup=markup)


    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–∏')
        btn2 = types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏')
        btn3 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏')
        markup.add(btn1, btn2, btn3)
        if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':

            bot.send_message(message.from_user.id, '–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                             reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

        elif message.text == '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–∏':
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–∏–∫–µ—Ç –∞–∫—Ü–∏–∏, –∞ —è –≤–µ—Ä–Ω—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')

        elif message.text == '–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏':
            bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ—Å—Ç—å')

        elif message.text == '–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏':
            bot.send_message(message.from_user.id, f'–õ—É—á—à–∏–µ –∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–µ–π—á–∞—Å: {str(ranked_tiket)} \n –º–µ—Ç—Ä–∏–∫–∏ —ç—Ç–∏—Ö –∞–∫—Ü–∏–π : {metrics}',
                             reply_markup=markup)

        elif str(message.text).strip().lower() in ticket_lists:
            ticket = str(message.text).strip().upper()

            date_now = datetime.today().date()
            last_date = datetime.today() - timedelta(days=180)

            horizon = 60

            bot.send_message(message.from_user.id, "–ì—Ä—É–∂—É –¥–∞–Ω–Ω—ã–µ –∏–∑ moexalgo")
            tradestats, orderstats, obstats = upload_data_from_moexalgo(ticket, last_date.date(), date_now)

            bot.send_message(message.from_user.id, "–°—á–∏—Ç–∞—é —Ü–µ–Ω—É –≤ –±—É–¥—É—â–µ–º...")

            inside = predict(tradestats, orderstats, obstats, horizon)

            df_price = inside[inside["segment"] == "price"].reset_index(drop=True)

            last_price, date_time = get_ticket_price(ticket, df_price, horizon)

            bot.send_message(message.from_user.id, "–°—á–∏—Ç–∞—é Take profit –∏ Stop loss...")

            take_profit, stop_loss = get_TP_SL(inside, last_price, horizon)

            bot.send_message(message.from_user.id,
                             f'–ê–∫—Ü–∏—è {ticket} \n –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {last_price} \n Take profit –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞: {take_profit}\n Stop loss –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞: {stop_loss}')

        else:
            bot.send_message(message.from_user.id, "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ—Å—Ç—å, —è —Å–µ–π—á–∞—Å –æ—Ü–µ–Ω—é –µ–µ –≤–ª–∏—è–Ω–∏—è")

            text = message.text

            text_predictor = NR.predict_news(text)

            if text_predictor > 0:
                bot.send_message(message.from_user.id,
                                 f'–î–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –Ω–∞ {text_predictor}%')
            else:
                bot.send_message(message.from_user.id,
                                 f'–î–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –Ω–∞ {text_predictor}%')


    bot.infinity_polling(timeout=10, long_polling_timeout=5)
